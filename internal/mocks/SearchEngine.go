// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "yadro-microservices/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// SearchEngine is an autogenerated mock type for the SearchEngine type
type SearchEngine struct {
	mock.Mock
}

// CreateIndex provides a mock function with given fields: ctx, comics
func (_m *SearchEngine) CreateIndex(ctx context.Context, comics domain.Comics) error {
	ret := _m.Called(ctx, comics)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Comics) error); ok {
		r0 = rf(ctx, comics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, queryTokens
func (_m *SearchEngine) Search(ctx context.Context, queryTokens []string) ([]int, error) {
	ret := _m.Called(ctx, queryTokens)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]int, error)); ok {
		return rf(ctx, queryTokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []int); ok {
		r0 = rf(ctx, queryTokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, queryTokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSearchEngine creates a new instance of SearchEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSearchEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *SearchEngine {
	mock := &SearchEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
