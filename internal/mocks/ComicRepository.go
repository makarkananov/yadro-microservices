// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "yadro-microservices/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// ComicRepository is an autogenerated mock type for the ComicRepository type
type ComicRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *ComicRepository) GetAll(ctx context.Context) (domain.Comics, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 domain.Comics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.Comics, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.Comics); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Comics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllIDs provides a mock function with given fields: ctx
func (_m *ComicRepository) GetAllIDs(ctx context.Context) (map[int]bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllIDs")
	}

	var r0 map[int]bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[int]bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[int]bool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ComicRepository) GetByID(ctx context.Context, id int) (*domain.Comic, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Comic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Comic, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Comic); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalComics provides a mock function with given fields: ctx
func (_m *ComicRepository) GetTotalComics(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalComics")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, c
func (_m *ComicRepository) Save(ctx context.Context, c domain.Comics) error {
	ret := _m.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Comics) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewComicRepository creates a new instance of ComicRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComicRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComicRepository {
	mock := &ComicRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
