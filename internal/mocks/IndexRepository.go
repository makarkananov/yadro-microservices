// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	fts "yadro-microservices/pkg/fts"

	mock "github.com/stretchr/testify/mock"
)

// IndexRepository is an autogenerated mock type for the IndexRepository type
type IndexRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, indexes, documents
func (_m *IndexRepository) Add(ctx context.Context, indexes map[string][]*fts.Index, documents map[int]bool) error {
	ret := _m.Called(ctx, indexes, documents)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]*fts.Index, map[int]bool) error); ok {
		r0 = rf(ctx, indexes, documents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DocumentIsIndexed provides a mock function with given fields: ctx, id
func (_m *IndexRepository) DocumentIsIndexed(ctx context.Context, id int) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DocumentIsIndexed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, word
func (_m *IndexRepository) Get(ctx context.Context, word string) ([]*fts.Index, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*fts.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*fts.Index, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*fts.Index); ok {
		r0 = rf(ctx, word)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fts.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkDocumentAsIndexed provides a mock function with given fields: ctx, id
func (_m *IndexRepository) MarkDocumentAsIndexed(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkDocumentAsIndexed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIndexRepository creates a new instance of IndexRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IndexRepository {
	mock := &IndexRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
