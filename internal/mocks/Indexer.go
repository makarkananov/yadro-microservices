// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	fts "yadro-microservices/pkg/fts"

	mock "github.com/stretchr/testify/mock"
)

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, token
func (_m *Indexer) Get(ctx context.Context, token string) ([]*fts.Index, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*fts.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*fts.Index, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*fts.Index); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fts.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIndexer creates a new instance of Indexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Indexer {
	mock := &Indexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
